#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012 Björn Edström <be@bjrn.se>
# See license for details.

import optparse

import funkcast.music as music
import funkcast.weather as weather


def parse_rules(options, args):
    """Parse out the rules system as described in the README.
    """

    # some defaults
    rules = {
        'duration': ('wind-speed', False, False),
        'volume': ('pressure', False, False),
        'time': ('temperature', False, True),
        'pitch': ('wind-direction', True, False)
    }
    rules_argv = args[:-1]
    for arg in rules_argv:
        try:
            note, point = arg.split('=')
            invert = point.startswith('-')
            absolute = point.endswith('*')
            point = point.strip('-*')
            rules[note] = (point, absolute, invert)
        except Exception, e:
            parser.error('failed to parse rule %r: %s' % (arg, e))
    return rules


def main():
    # command line parsing
    parser = optparse.OptionParser(usage='usage: %prog [options] RULES LOCATION')
    parser.add_option("-f", "--file", dest="filename", default='output',
                      help="write report to FILE [%default]", metavar="FILE")
    parser.add_option("-t", "--tempo", dest="tempo", default=120, type='int',
                      help="tempo [%default]", metavar="BEAT")
    parser.add_option("-l", "--lilypond", dest="lilypond", default=False, action='store_true',
                      help="generate lilypond output")
    parser.add_option("--source", dest="source", default='yr',
                      help="weather forecast source [%default]", metavar="SOURCE")

    (options, args) = parser.parse_args()

    if options.source != 'yr':
        parser.error('supported sources are "yr"')

    location = args[-1]

    # TODO: Add option for hour-by-hour report
    weather_data = weather.get_report(location)

    rules = parse_rules(options, args)

    # Get output format and output file
    if options.lilypond:
        output_format = 'lilypond'
        if options.filename == '-':
            output = sys.stdout
        else:
            output = file(options.filename + '.ly', 'w')
    else:
        output_format = 'midi'
        output = file(options.filename + '.mid', 'wb')

    # Make music!
    music.generate(weather_data, rules, output_format, output, options)


if __name__ == '__main__':
    main()
